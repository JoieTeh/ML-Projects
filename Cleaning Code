{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "e70e313f-e675-4710-9d52-cabdd5e4c875",
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Processing file: landing/fhvhv_tripdata_2019-02.parquet with size 513054623 bytes\n",
      "Cleaned file saved to: Cleaned_November_13/fhvhv_tripdata_2019-02.parquet_cleaned.parquet\n",
      "Processing file: landing/fhvhv_tripdata_2019-03.parquet with size 610854382 bytes\n",
      "Cleaned file saved to: Cleaned_November_13/fhvhv_tripdata_2019-03.parquet_cleaned.parquet\n",
      "Processing file: landing/fhvhv_tripdata_2019-04.parquet with size 559656651 bytes\n",
      "Cleaned file saved to: Cleaned_November_13/fhvhv_tripdata_2019-04.parquet_cleaned.parquet\n",
      "Processing file: landing/fhvhv_tripdata_2019-05.parquet with size 570821186 bytes\n",
      "Cleaned file saved to: Cleaned_November_13/fhvhv_tripdata_2019-05.parquet_cleaned.parquet\n",
      "Processing file: landing/fhvhv_tripdata_2019-06.parquet with size 536191926 bytes\n",
      "Cleaned file saved to: Cleaned_November_13/fhvhv_tripdata_2019-06.parquet_cleaned.parquet\n",
      "Processing file: landing/fhvhv_tripdata_2019-07.parquet with size 516008365 bytes\n",
      "Cleaned file saved to: Cleaned_November_13/fhvhv_tripdata_2019-07.parquet_cleaned.parquet\n",
      "Processing file: landing/fhvhv_tripdata_2019-08.parquet with size 501435971 bytes\n",
      "Cleaned file saved to: Cleaned_November_13/fhvhv_tripdata_2019-08.parquet_cleaned.parquet\n",
      "Processing file: landing/fhvhv_tripdata_2019-09.parquet with size 515944585 bytes\n",
      "Cleaned file saved to: Cleaned_November_13/fhvhv_tripdata_2019-09.parquet_cleaned.parquet\n",
      "Processing file: landing/fhvhv_tripdata_2019-10.parquet with size 549370339 bytes\n",
      "Cleaned file saved to: Cleaned_November_13/fhvhv_tripdata_2019-10.parquet_cleaned.parquet\n",
      "Processing file: landing/fhvhv_tripdata_2019-11.parquet with size 561011664 bytes\n",
      "Cleaned file saved to: Cleaned_November_13/fhvhv_tripdata_2019-11.parquet_cleaned.parquet\n",
      "Processing file: landing/fhvhv_tripdata_2019-12.parquet with size 576648876 bytes\n",
      "Cleaned file saved to: Cleaned_November_13/fhvhv_tripdata_2019-12.parquet_cleaned.parquet\n",
      "Processing file: landing/fhvhv_tripdata_2020-01.parquet with size 531275933 bytes\n",
      "Cleaned file saved to: Cleaned_November_13/fhvhv_tripdata_2020-01.parquet_cleaned.parquet\n",
      "Processing file: landing/fhvhv_tripdata_2020-02.parquet with size 558874878 bytes\n",
      "Cleaned file saved to: Cleaned_November_13/fhvhv_tripdata_2020-02.parquet_cleaned.parquet\n",
      "Processing file: landing/fhvhv_tripdata_2020-03.parquet with size 346478514 bytes\n",
      "Cleaned file saved to: Cleaned_November_13/fhvhv_tripdata_2020-03.parquet_cleaned.parquet\n",
      "Processing file: landing/fhvhv_tripdata_2020-04.parquet with size 114835005 bytes\n",
      "Cleaned file saved to: Cleaned_November_13/fhvhv_tripdata_2020-04.parquet_cleaned.parquet\n",
      "Processing file: landing/fhvhv_tripdata_2020-05.parquet with size 160544713 bytes\n",
      "Cleaned file saved to: Cleaned_November_13/fhvhv_tripdata_2020-05.parquet_cleaned.parquet\n",
      "Processing file: landing/fhvhv_tripdata_2020-06.parquet with size 197972781 bytes\n",
      "Cleaned file saved to: Cleaned_November_13/fhvhv_tripdata_2020-06.parquet_cleaned.parquet\n",
      "Processing file: landing/fhvhv_tripdata_2020-07.parquet with size 260252547 bytes\n",
      "Cleaned file saved to: Cleaned_November_13/fhvhv_tripdata_2020-07.parquet_cleaned.parquet\n",
      "Processing file: landing/fhvhv_tripdata_2020-08.parquet with size 290447928 bytes\n",
      "Cleaned file saved to: Cleaned_November_13/fhvhv_tripdata_2020-08.parquet_cleaned.parquet\n",
      "Processing file: landing/fhvhv_tripdata_2020-09.parquet with size 314689382 bytes\n",
      "Cleaned file saved to: Cleaned_November_13/fhvhv_tripdata_2020-09.parquet_cleaned.parquet\n",
      "Processing file: landing/fhvhv_tripdata_2020-10.parquet with size 345178105 bytes\n",
      "Cleaned file saved to: Cleaned_November_13/fhvhv_tripdata_2020-10.parquet_cleaned.parquet\n",
      "Processing file: landing/fhvhv_tripdata_2020-11.parquet with size 301856152 bytes\n",
      "Cleaned file saved to: Cleaned_November_13/fhvhv_tripdata_2020-11.parquet_cleaned.parquet\n",
      "Processing file: landing/fhvhv_tripdata_2020-12.parquet with size 303264028 bytes\n",
      "Cleaned file saved to: Cleaned_November_13/fhvhv_tripdata_2020-12.parquet_cleaned.parquet\n",
      "Processing file: landing/fhvhv_tripdata_2021-01.parquet with size 308924937 bytes\n",
      "Cleaned file saved to: Cleaned_November_13/fhvhv_tripdata_2021-01.parquet_cleaned.parquet\n",
      "Processing file: landing/fhvhv_tripdata_2021-02.parquet with size 302633211 bytes\n",
      "Cleaned file saved to: Cleaned_November_13/fhvhv_tripdata_2021-02.parquet_cleaned.parquet\n",
      "Processing file: landing/fhvhv_tripdata_2021-03.parquet with size 368370915 bytes\n",
      "Cleaned file saved to: Cleaned_November_13/fhvhv_tripdata_2021-03.parquet_cleaned.parquet\n",
      "Processing file: landing/fhvhv_tripdata_2021-04.parquet with size 368416040 bytes\n",
      "Cleaned file saved to: Cleaned_November_13/fhvhv_tripdata_2021-04.parquet_cleaned.parquet\n",
      "Processing file: landing/fhvhv_tripdata_2021-05.parquet with size 387251422 bytes\n",
      "Cleaned file saved to: Cleaned_November_13/fhvhv_tripdata_2021-05.parquet_cleaned.parquet\n",
      "Processing file: landing/fhvhv_tripdata_2021-06.parquet with size 394114750 bytes\n",
      "Cleaned file saved to: Cleaned_November_13/fhvhv_tripdata_2021-06.parquet_cleaned.parquet\n",
      "Processing file: landing/fhvhv_tripdata_2021-07.parquet with size 395966912 bytes\n",
      "Cleaned file saved to: Cleaned_November_13/fhvhv_tripdata_2021-07.parquet_cleaned.parquet\n",
      "Processing file: landing/fhvhv_tripdata_2021-08.parquet with size 382326987 bytes\n",
      "Cleaned file saved to: Cleaned_November_13/fhvhv_tripdata_2021-08.parquet_cleaned.parquet\n",
      "Processing file: landing/fhvhv_tripdata_2021-09.parquet with size 393687782 bytes\n",
      "Cleaned file saved to: Cleaned_November_13/fhvhv_tripdata_2021-09.parquet_cleaned.parquet\n",
      "Processing file: landing/fhvhv_tripdata_2021-10.parquet with size 430115885 bytes\n",
      "Cleaned file saved to: Cleaned_November_13/fhvhv_tripdata_2021-10.parquet_cleaned.parquet\n",
      "Processing file: landing/fhvhv_tripdata_2021-11.parquet with size 411061458 bytes\n",
      "Cleaned file saved to: Cleaned_November_13/fhvhv_tripdata_2021-11.parquet_cleaned.parquet\n",
      "Processing file: landing/fhvhv_tripdata_2021-12.parquet with size 410934116 bytes\n",
      "Cleaned file saved to: Cleaned_November_13/fhvhv_tripdata_2021-12.parquet_cleaned.parquet\n",
      "Processing file: landing/fhvhv_tripdata_2022-01.parquet with size 374619188 bytes\n",
      "Cleaned file saved to: Cleaned_November_13/fhvhv_tripdata_2022-01.parquet_cleaned.parquet\n",
      "Processing file: landing/fhvhv_tripdata_2022-02.parquet with size 407154284 bytes\n",
      "Cleaned file saved to: Cleaned_November_13/fhvhv_tripdata_2022-02.parquet_cleaned.parquet\n",
      "Processing file: landing/fhvhv_tripdata_2022-03.parquet with size 471233716 bytes\n",
      "Cleaned file saved to: Cleaned_November_13/fhvhv_tripdata_2022-03.parquet_cleaned.parquet\n",
      "Processing file: landing/fhvhv_tripdata_2022-04.parquet with size 455549033 bytes\n",
      "Cleaned file saved to: Cleaned_November_13/fhvhv_tripdata_2022-04.parquet_cleaned.parquet\n",
      "Processing file: landing/fhvhv_tripdata_2022-05.parquet with size 468565693 bytes\n",
      "Cleaned file saved to: Cleaned_November_13/fhvhv_tripdata_2022-05.parquet_cleaned.parquet\n",
      "Processing file: landing/fhvhv_tripdata_2022-06.parquet with size 458193119 bytes\n",
      "Cleaned file saved to: Cleaned_November_13/fhvhv_tripdata_2022-06.parquet_cleaned.parquet\n",
      "Processing file: landing/fhvhv_tripdata_2022-07.parquet with size 443730405 bytes\n",
      "Cleaned file saved to: Cleaned_November_13/fhvhv_tripdata_2022-07.parquet_cleaned.parquet\n",
      "Processing file: landing/fhvhv_tripdata_2022-08.parquet with size 436536084 bytes\n",
      "Cleaned file saved to: Cleaned_November_13/fhvhv_tripdata_2022-08.parquet_cleaned.parquet\n",
      "Processing file: landing/fhvhv_tripdata_2022-09.parquet with size 458009813 bytes\n",
      "Cleaned file saved to: Cleaned_November_13/fhvhv_tripdata_2022-09.parquet_cleaned.parquet\n",
      "Processing file: landing/fhvhv_tripdata_2022-10.parquet with size 495083481 bytes\n",
      "Cleaned file saved to: Cleaned_November_13/fhvhv_tripdata_2022-10.parquet_cleaned.parquet\n",
      "Processing file: landing/fhvhv_tripdata_2022-11.parquet with size 464298215 bytes\n",
      "Cleaned file saved to: Cleaned_November_13/fhvhv_tripdata_2022-11.parquet_cleaned.parquet\n",
      "Processing file: landing/fhvhv_tripdata_2022-12.parquet with size 503674188 bytes\n",
      "Cleaned file saved to: Cleaned_November_13/fhvhv_tripdata_2022-12.parquet_cleaned.parquet\n",
      "Processing file: landing/fhvhv_tripdata_2023-01.parquet with size 473816636 bytes\n",
      "Cleaned file saved to: Cleaned_November_13/fhvhv_tripdata_2023-01.parquet_cleaned.parquet\n",
      "Processing file: landing/fhvhv_tripdata_2023-02.parquet with size 458895583 bytes\n",
      "Cleaned file saved to: Cleaned_November_13/fhvhv_tripdata_2023-02.parquet_cleaned.parquet\n",
      "Processing file: landing/fhvhv_tripdata_2023-03.parquet with size 522484870 bytes\n",
      "Cleaned file saved to: Cleaned_November_13/fhvhv_tripdata_2023-03.parquet_cleaned.parquet\n",
      "Processing file: landing/fhvhv_tripdata_2023-04.parquet with size 491826475 bytes\n",
      "Cleaned file saved to: Cleaned_November_13/fhvhv_tripdata_2023-04.parquet_cleaned.parquet\n",
      "Processing file: landing/fhvhv_tripdata_2023-05.parquet with size 513108369 bytes\n",
      "Cleaned file saved to: Cleaned_November_13/fhvhv_tripdata_2023-05.parquet_cleaned.parquet\n",
      "Processing file: landing/fhvhv_tripdata_2023-06.parquet with size 498799838 bytes\n",
      "Cleaned file saved to: Cleaned_November_13/fhvhv_tripdata_2023-06.parquet_cleaned.parquet\n",
      "Processing file: landing/fhvhv_tripdata_2023-07.parquet with size 492310857 bytes\n",
      "Cleaned file saved to: Cleaned_November_13/fhvhv_tripdata_2023-07.parquet_cleaned.parquet\n",
      "Processing file: landing/fhvhv_tripdata_2023-08.parquet with size 450263712 bytes\n",
      "Cleaned file saved to: Cleaned_November_13/fhvhv_tripdata_2023-08.parquet_cleaned.parquet\n",
      "Processing file: landing/fhvhv_tripdata_2023-09.parquet with size 478067839 bytes\n",
      "Cleaned file saved to: Cleaned_November_13/fhvhv_tripdata_2023-09.parquet_cleaned.parquet\n",
      "Processing file: landing/fhvhv_tripdata_2023-10.parquet with size 485826227 bytes\n",
      "Cleaned file saved to: Cleaned_November_13/fhvhv_tripdata_2023-10.parquet_cleaned.parquet\n",
      "Processing file: landing/fhvhv_tripdata_2023-11.parquet with size 464926008 bytes\n",
      "Cleaned file saved to: Cleaned_November_13/fhvhv_tripdata_2023-11.parquet_cleaned.parquet\n",
      "Processing file: landing/fhvhv_tripdata_2023-12.parquet with size 490453634 bytes\n",
      "Cleaned file saved to: Cleaned_November_13/fhvhv_tripdata_2023-12.parquet_cleaned.parquet\n",
      "Processing file: landing/fhvhv_tripdata_2024-01.parquet with size 472757547 bytes\n",
      "Cleaned file saved to: Cleaned_November_13/fhvhv_tripdata_2024-01.parquet_cleaned.parquet\n",
      "Processing file: landing/fhvhv_tripdata_2024-02.parquet with size 462475428 bytes\n",
      "Cleaned file saved to: Cleaned_November_13/fhvhv_tripdata_2024-02.parquet_cleaned.parquet\n",
      "Processing file: landing/fhvhv_tripdata_2024-03.parquet with size 507940560 bytes\n",
      "Cleaned file saved to: Cleaned_November_13/fhvhv_tripdata_2024-03.parquet_cleaned.parquet\n",
      "Processing file: landing/fhvhv_tripdata_2024-04.parquet with size 476115643 bytes\n",
      "Cleaned file saved to: Cleaned_November_13/fhvhv_tripdata_2024-04.parquet_cleaned.parquet\n",
      "Processing file: landing/fhvhv_tripdata_2024-05.parquet with size 498575918 bytes\n",
      "Cleaned file saved to: Cleaned_November_13/fhvhv_tripdata_2024-05.parquet_cleaned.parquet\n",
      "Processing file: landing/fhvhv_tripdata_2024-06.parquet with size 484417715 bytes\n",
      "Cleaned file saved to: Cleaned_November_13/fhvhv_tripdata_2024-06.parquet_cleaned.parquet\n",
      "Processing file: landing/fhvhv_tripdata_2024-07.parquet with size 468437522 bytes\n",
      "Cleaned file saved to: Cleaned_November_13/fhvhv_tripdata_2024-07.parquet_cleaned.parquet\n"
     ]
    }
   ],
   "source": [
    "from google.cloud import storage\n",
    "import pandas as pd\n",
    "import os\n",
    "from io import BytesIO\n",
    "\n",
    "# Define a data cleaning function\n",
    "def data_cleaning(df):\n",
    "    # Drop columns with mostly missing data and ununique data\n",
    "    df = df.drop(['originating_base_num', 'on_scene_datetime', 'access_a_ride_flag', 'wav_match_flag','airport_fee'], axis=1, errors='ignore')\n",
    "    \n",
    "    # Remove rows with driver pay outliers\n",
    "    df = df[(df['driver_pay'] > 0) & (df['driver_pay'] < 600)]\n",
    "    \n",
    "    # Remove rows with outlier passenger fare\n",
    "    df = df[(df['base_passenger_fare'] > 0) & (df['base_passenger_fare'] < 800)]\n",
    "    \n",
    "    # Remove rows with bad or zero trip miles\n",
    "    df = df[(df['trip_miles'] > 0) & (df['trip_miles'] < 150)]\n",
    "    \n",
    "    # Filling Na with zero\n",
    "    df = df.fillna(0)\n",
    "    \n",
    "    # Convert specific columns to strings and float\n",
    "    df['hvfhs_license_num'] = df['hvfhs_license_num'].astype(str)\n",
    "    df['dispatching_base_num'] = df['dispatching_base_num'].astype(str)\n",
    "    df['trip_miles'] = df['trip_miles'].astype(float)\n",
    "    \n",
    "    return df\n",
    "\n",
    "\n",
    "# Google Cloud Storage bucket name\n",
    "source_bucket_name = \"XXX  \n",
    "\n",
    "# Initialize the Google Cloud Storage client\n",
    "storage_client = storage.Client()\n",
    "# Define the folder pattern for the source files\n",
    "folder_pattern = \"landing/\"\n",
    "\n",
    "# List blobs in the source folder\n",
    "blobs = storage_client.list_blobs(source_bucket_name, prefix=folder_pattern)\n",
    "\n",
    "# Filter for .parquet files only\n",
    "filtered_blobs = [blob for blob in blobs if blob.name.endswith('.parquet')]\n",
    "\n",
    "# Iterate through the list of files\n",
    "for blob in filtered_blobs:\n",
    "    print(f\"Processing file: {blob.name} with size {blob.size} bytes\")\n",
    "    \n",
    "    # Download the Parquet file as bytes and load into a DataFrame\n",
    "    df = pd.read_parquet(BytesIO(blob.download_as_bytes()), engine='pyarrow')\n",
    "    \n",
    "    # Clean the data\n",
    "    df = data_cleaning(df)\n",
    "    \n",
    "    # Define the path for the cleaned file\n",
    "    filename = os.path.basename(blob.name)\n",
    "    cleaned_file_path = f\"Cleaned_November_13/{filename}_cleaned.parquet\"\n",
    "    \n",
    "    # Create a BytesIO buffer to hold the cleaned DataFrame as parquet data\n",
    "    parquet_buffer = BytesIO()\n",
    "    df.to_parquet(parquet_buffer, index=False, engine='pyarrow')\n",
    "    parquet_buffer.seek(0)  # Reset the buffer position\n",
    "    \n",
    "    # Upload the cleaned data to the specified path in GCS\n",
    "    cleaned_blob = storage_client.bucket(source_bucket_name).blob(cleaned_file_path)\n",
    "    cleaned_blob.upload_from_file(parquet_buffer, content_type='application/octet-stream')\n",
    "\n",
    "    print(f\"Cleaned file saved to: {cleaned_file_path}\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "c09d76b8-be5f-4229-88de-358bb9ffdf3a",
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Requirement already satisfied: gcsfs in /opt/conda/miniconda3/lib/python3.11/site-packages (2023.12.2.post1)\n",
      "Requirement already satisfied: aiohttp!=4.0.0a0,!=4.0.0a1 in /opt/conda/miniconda3/lib/python3.11/site-packages (from gcsfs) (3.10.10)\n",
      "Requirement already satisfied: decorator>4.1.2 in /opt/conda/miniconda3/lib/python3.11/site-packages (from gcsfs) (5.1.1)\n",
      "Requirement already satisfied: fsspec==2023.12.2 in /opt/conda/miniconda3/lib/python3.11/site-packages (from gcsfs) (2023.12.2)\n",
      "Requirement already satisfied: google-auth>=1.2 in /opt/conda/miniconda3/lib/python3.11/site-packages (from gcsfs) (2.35.0)\n",
      "Requirement already satisfied: google-auth-oauthlib in /opt/conda/miniconda3/lib/python3.11/site-packages (from gcsfs) (1.1.0)\n",
      "Requirement already satisfied: google-cloud-storage in /opt/conda/miniconda3/lib/python3.11/site-packages (from gcsfs) (2.13.0)\n",
      "Requirement already satisfied: requests in /opt/conda/miniconda3/lib/python3.11/site-packages (from gcsfs) (2.31.0)\n",
      "Requirement already satisfied: aiohappyeyeballs>=2.3.0 in /opt/conda/miniconda3/lib/python3.11/site-packages (from aiohttp!=4.0.0a0,!=4.0.0a1->gcsfs) (2.4.3)\n",
      "Requirement already satisfied: aiosignal>=1.1.2 in /opt/conda/miniconda3/lib/python3.11/site-packages (from aiohttp!=4.0.0a0,!=4.0.0a1->gcsfs) (1.3.1)\n",
      "Requirement already satisfied: attrs>=17.3.0 in /opt/conda/miniconda3/lib/python3.11/site-packages (from aiohttp!=4.0.0a0,!=4.0.0a1->gcsfs) (24.2.0)\n",
      "Requirement already satisfied: frozenlist>=1.1.1 in /opt/conda/miniconda3/lib/python3.11/site-packages (from aiohttp!=4.0.0a0,!=4.0.0a1->gcsfs) (1.5.0)\n",
      "Requirement already satisfied: multidict<7.0,>=4.5 in /opt/conda/miniconda3/lib/python3.11/site-packages (from aiohttp!=4.0.0a0,!=4.0.0a1->gcsfs) (6.1.0)\n",
      "Requirement already satisfied: yarl<2.0,>=1.12.0 in /opt/conda/miniconda3/lib/python3.11/site-packages (from aiohttp!=4.0.0a0,!=4.0.0a1->gcsfs) (1.16.0)\n",
      "Requirement already satisfied: cachetools<6.0,>=2.0.0 in /opt/conda/miniconda3/lib/python3.11/site-packages (from google-auth>=1.2->gcsfs) (5.5.0)\n",
      "Requirement already satisfied: pyasn1-modules>=0.2.1 in /opt/conda/miniconda3/lib/python3.11/site-packages (from google-auth>=1.2->gcsfs) (0.4.1)\n",
      "Requirement already satisfied: rsa<5,>=3.1.4 in /opt/conda/miniconda3/lib/python3.11/site-packages (from google-auth>=1.2->gcsfs) (4.9)\n",
      "Requirement already satisfied: requests-oauthlib>=0.7.0 in /opt/conda/miniconda3/lib/python3.11/site-packages (from google-auth-oauthlib->gcsfs) (2.0.0)\n",
      "Requirement already satisfied: google-api-core!=2.0.*,!=2.1.*,!=2.2.*,!=2.3.0,<3.0.0dev,>=1.31.5 in /opt/conda/miniconda3/lib/python3.11/site-packages (from google-cloud-storage->gcsfs) (2.21.0)\n",
      "Requirement already satisfied: google-cloud-core<3.0dev,>=2.3.0 in /opt/conda/miniconda3/lib/python3.11/site-packages (from google-cloud-storage->gcsfs) (2.4.1)\n",
      "Requirement already satisfied: google-resumable-media>=2.6.0 in /opt/conda/miniconda3/lib/python3.11/site-packages (from google-cloud-storage->gcsfs) (2.7.2)\n",
      "Requirement already satisfied: google-crc32c<2.0dev,>=1.0 in /opt/conda/miniconda3/lib/python3.11/site-packages (from google-cloud-storage->gcsfs) (1.1.2)\n",
      "Requirement already satisfied: charset-normalizer<4,>=2 in /opt/conda/miniconda3/lib/python3.11/site-packages (from requests->gcsfs) (2.0.4)\n",
      "Requirement already satisfied: idna<4,>=2.5 in /opt/conda/miniconda3/lib/python3.11/site-packages (from requests->gcsfs) (3.4)\n",
      "Requirement already satisfied: urllib3<3,>=1.21.1 in /opt/conda/miniconda3/lib/python3.11/site-packages (from requests->gcsfs) (1.26.18)\n",
      "Requirement already satisfied: certifi>=2017.4.17 in /opt/conda/miniconda3/lib/python3.11/site-packages (from requests->gcsfs) (2024.8.30)\n",
      "Requirement already satisfied: googleapis-common-protos<2.0.dev0,>=1.56.2 in /opt/conda/miniconda3/lib/python3.11/site-packages (from google-api-core!=2.0.*,!=2.1.*,!=2.2.*,!=2.3.0,<3.0.0dev,>=1.31.5->google-cloud-storage->gcsfs) (1.65.0)\n",
      "Requirement already satisfied: protobuf!=3.20.0,!=3.20.1,!=4.21.0,!=4.21.1,!=4.21.2,!=4.21.3,!=4.21.4,!=4.21.5,<6.0.0.dev0,>=3.19.5 in /opt/conda/miniconda3/lib/python3.11/site-packages (from google-api-core!=2.0.*,!=2.1.*,!=2.2.*,!=2.3.0,<3.0.0dev,>=1.31.5->google-cloud-storage->gcsfs) (4.24.4)\n",
      "Requirement already satisfied: proto-plus<2.0.0dev,>=1.22.3 in /opt/conda/miniconda3/lib/python3.11/site-packages (from google-api-core!=2.0.*,!=2.1.*,!=2.2.*,!=2.3.0,<3.0.0dev,>=1.31.5->google-cloud-storage->gcsfs) (1.25.0)\n",
      "Requirement already satisfied: cffi>=1.0.0 in /opt/conda/miniconda3/lib/python3.11/site-packages (from google-crc32c<2.0dev,>=1.0->google-cloud-storage->gcsfs) (1.16.0)\n",
      "Requirement already satisfied: pyasn1<0.7.0,>=0.4.6 in /opt/conda/miniconda3/lib/python3.11/site-packages (from pyasn1-modules>=0.2.1->google-auth>=1.2->gcsfs) (0.6.1)\n",
      "Requirement already satisfied: oauthlib>=3.0.0 in /opt/conda/miniconda3/lib/python3.11/site-packages (from requests-oauthlib>=0.7.0->google-auth-oauthlib->gcsfs) (3.2.2)\n",
      "Requirement already satisfied: propcache>=0.2.0 in /opt/conda/miniconda3/lib/python3.11/site-packages (from yarl<2.0,>=1.12.0->aiohttp!=4.0.0a0,!=4.0.0a1->gcsfs) (0.2.0)\n",
      "Requirement already satisfied: pycparser in /opt/conda/miniconda3/lib/python3.11/site-packages (from cffi>=1.0.0->google-crc32c<2.0dev,>=1.0->google-cloud-storage->gcsfs) (2.21)\n",
      "\u001b[33mWARNING: Running pip as the 'root' user can result in broken permissions and conflicting behaviour with the system package manager. It is recommended to use a virtual environment instead: https://pip.pypa.io/warnings/venv\u001b[0m\u001b[33m\n",
      "\u001b[0m"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>hvfhs_license_num</th>\n",
       "      <th>dispatching_base_num</th>\n",
       "      <th>request_datetime</th>\n",
       "      <th>pickup_datetime</th>\n",
       "      <th>dropoff_datetime</th>\n",
       "      <th>PULocationID</th>\n",
       "      <th>DOLocationID</th>\n",
       "      <th>trip_miles</th>\n",
       "      <th>trip_time</th>\n",
       "      <th>base_passenger_fare</th>\n",
       "      <th>...</th>\n",
       "      <th>sales_tax</th>\n",
       "      <th>congestion_surcharge</th>\n",
       "      <th>airport_fee</th>\n",
       "      <th>tips</th>\n",
       "      <th>driver_pay</th>\n",
       "      <th>shared_request_flag</th>\n",
       "      <th>shared_match_flag</th>\n",
       "      <th>access_a_ride_flag</th>\n",
       "      <th>wav_request_flag</th>\n",
       "      <th>wav_match_flag</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>HV0003</td>\n",
       "      <td>B02867</td>\n",
       "      <td>2019-02-01 00:01:26</td>\n",
       "      <td>2019-02-01 00:05:18</td>\n",
       "      <td>2019-02-01 00:14:57</td>\n",
       "      <td>245</td>\n",
       "      <td>251</td>\n",
       "      <td>2.45</td>\n",
       "      <td>579</td>\n",
       "      <td>9.35</td>\n",
       "      <td>...</td>\n",
       "      <td>0.83</td>\n",
       "      <td>0.0</td>\n",
       "      <td>None</td>\n",
       "      <td>0.0</td>\n",
       "      <td>7.48</td>\n",
       "      <td>Y</td>\n",
       "      <td>N</td>\n",
       "      <td>N</td>\n",
       "      <td>N</td>\n",
       "      <td>None</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>HV0003</td>\n",
       "      <td>B02879</td>\n",
       "      <td>2019-02-01 00:26:08</td>\n",
       "      <td>2019-02-01 00:41:29</td>\n",
       "      <td>2019-02-01 00:49:39</td>\n",
       "      <td>216</td>\n",
       "      <td>197</td>\n",
       "      <td>1.71</td>\n",
       "      <td>490</td>\n",
       "      <td>7.91</td>\n",
       "      <td>...</td>\n",
       "      <td>0.70</td>\n",
       "      <td>0.0</td>\n",
       "      <td>None</td>\n",
       "      <td>2.0</td>\n",
       "      <td>7.93</td>\n",
       "      <td>N</td>\n",
       "      <td>N</td>\n",
       "      <td>N</td>\n",
       "      <td>N</td>\n",
       "      <td>None</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>HV0005</td>\n",
       "      <td>B02510</td>\n",
       "      <td>2019-02-01 00:48:58</td>\n",
       "      <td>2019-02-01 00:51:34</td>\n",
       "      <td>2019-02-01 01:28:29</td>\n",
       "      <td>261</td>\n",
       "      <td>234</td>\n",
       "      <td>5.01</td>\n",
       "      <td>2159</td>\n",
       "      <td>44.96</td>\n",
       "      <td>...</td>\n",
       "      <td>3.99</td>\n",
       "      <td>0.0</td>\n",
       "      <td>None</td>\n",
       "      <td>0.0</td>\n",
       "      <td>35.97</td>\n",
       "      <td>N</td>\n",
       "      <td>Y</td>\n",
       "      <td>N</td>\n",
       "      <td>N</td>\n",
       "      <td>None</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>HV0005</td>\n",
       "      <td>B02510</td>\n",
       "      <td>2019-02-01 00:02:15</td>\n",
       "      <td>2019-02-01 00:03:51</td>\n",
       "      <td>2019-02-01 00:07:16</td>\n",
       "      <td>87</td>\n",
       "      <td>87</td>\n",
       "      <td>0.34</td>\n",
       "      <td>179</td>\n",
       "      <td>7.19</td>\n",
       "      <td>...</td>\n",
       "      <td>0.64</td>\n",
       "      <td>0.0</td>\n",
       "      <td>None</td>\n",
       "      <td>3.0</td>\n",
       "      <td>5.39</td>\n",
       "      <td>N</td>\n",
       "      <td>Y</td>\n",
       "      <td>N</td>\n",
       "      <td>N</td>\n",
       "      <td>None</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>HV0005</td>\n",
       "      <td>B02510</td>\n",
       "      <td>2019-02-01 00:06:17</td>\n",
       "      <td>2019-02-01 00:09:44</td>\n",
       "      <td>2019-02-01 00:39:56</td>\n",
       "      <td>87</td>\n",
       "      <td>198</td>\n",
       "      <td>6.84</td>\n",
       "      <td>1799</td>\n",
       "      <td>24.25</td>\n",
       "      <td>...</td>\n",
       "      <td>2.16</td>\n",
       "      <td>0.0</td>\n",
       "      <td>None</td>\n",
       "      <td>4.0</td>\n",
       "      <td>17.07</td>\n",
       "      <td>N</td>\n",
       "      <td>Y</td>\n",
       "      <td>N</td>\n",
       "      <td>N</td>\n",
       "      <td>None</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows × 22 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "  hvfhs_license_num dispatching_base_num    request_datetime  \\\n",
       "0            HV0003               B02867 2019-02-01 00:01:26   \n",
       "1            HV0003               B02879 2019-02-01 00:26:08   \n",
       "2            HV0005               B02510 2019-02-01 00:48:58   \n",
       "3            HV0005               B02510 2019-02-01 00:02:15   \n",
       "4            HV0005               B02510 2019-02-01 00:06:17   \n",
       "\n",
       "      pickup_datetime    dropoff_datetime  PULocationID  DOLocationID  \\\n",
       "0 2019-02-01 00:05:18 2019-02-01 00:14:57           245           251   \n",
       "1 2019-02-01 00:41:29 2019-02-01 00:49:39           216           197   \n",
       "2 2019-02-01 00:51:34 2019-02-01 01:28:29           261           234   \n",
       "3 2019-02-01 00:03:51 2019-02-01 00:07:16            87            87   \n",
       "4 2019-02-01 00:09:44 2019-02-01 00:39:56            87           198   \n",
       "\n",
       "   trip_miles  trip_time  base_passenger_fare  ...  sales_tax  \\\n",
       "0        2.45        579                 9.35  ...       0.83   \n",
       "1        1.71        490                 7.91  ...       0.70   \n",
       "2        5.01       2159                44.96  ...       3.99   \n",
       "3        0.34        179                 7.19  ...       0.64   \n",
       "4        6.84       1799                24.25  ...       2.16   \n",
       "\n",
       "   congestion_surcharge  airport_fee  tips driver_pay  shared_request_flag  \\\n",
       "0                   0.0         None   0.0       7.48                    Y   \n",
       "1                   0.0         None   2.0       7.93                    N   \n",
       "2                   0.0         None   0.0      35.97                    N   \n",
       "3                   0.0         None   3.0       5.39                    N   \n",
       "4                   0.0         None   4.0      17.07                    N   \n",
       "\n",
       "   shared_match_flag access_a_ride_flag wav_request_flag wav_match_flag  \n",
       "0                  N                  N                N           None  \n",
       "1                  N                  N                N           None  \n",
       "2                  Y                  N                N           None  \n",
       "3                  Y                  N                N           None  \n",
       "4                  Y                  N                N           None  \n",
       "\n",
       "[5 rows x 22 columns]"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "!pip install gcsfs\n",
    "\n",
    "import pandas as pd\n",
    "\n",
    "# Read the Parquet file directly from GCS into a DataFrame\n",
    "df = pd.read_parquet('XXX/fhvhv_tripdata_2019-02.parquet_cleaned.parquet', engine='pyarrow')\n",
    "\n",
    "# Now, you can perform your analysis on the DataFrame 'df'\n",
    "df.head()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "3f376c86-830a-44aa-8a42-9c4cad97fcf6",
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "hvfhs_license_num              0\n",
      "dispatching_base_num         403\n",
      "request_datetime            2897\n",
      "pickup_datetime                0\n",
      "dropoff_datetime               0\n",
      "PULocationID                   0\n",
      "DOLocationID                   0\n",
      "trip_miles                     0\n",
      "trip_time                      0\n",
      "base_passenger_fare            0\n",
      "tolls                          0\n",
      "bcf                            0\n",
      "sales_tax                      0\n",
      "congestion_surcharge      511730\n",
      "airport_fee             17889647\n",
      "tips                           0\n",
      "driver_pay                     0\n",
      "shared_request_flag            0\n",
      "shared_match_flag              0\n",
      "access_a_ride_flag             0\n",
      "wav_request_flag               0\n",
      "wav_match_flag          17889647\n",
      "dtype: int64\n"
     ]
    }
   ],
   "source": [
    "na_counts = df.isna().sum()\n",
    "\n",
    "# Display the counts of NaN values per column\n",
    "print(na_counts)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "56fd4a62-fbad-4edb-8b32-3c4cb14f2368",
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>request_datetime</th>\n",
       "      <th>pickup_datetime</th>\n",
       "      <th>dropoff_datetime</th>\n",
       "      <th>PULocationID</th>\n",
       "      <th>DOLocationID</th>\n",
       "      <th>trip_miles</th>\n",
       "      <th>trip_time</th>\n",
       "      <th>base_passenger_fare</th>\n",
       "      <th>tolls</th>\n",
       "      <th>bcf</th>\n",
       "      <th>sales_tax</th>\n",
       "      <th>congestion_surcharge</th>\n",
       "      <th>tips</th>\n",
       "      <th>driver_pay</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>17886750</td>\n",
       "      <td>17889647</td>\n",
       "      <td>17889647</td>\n",
       "      <td>17889647.00</td>\n",
       "      <td>17889647.00</td>\n",
       "      <td>17889647.00</td>\n",
       "      <td>17889647.00</td>\n",
       "      <td>17889647.00</td>\n",
       "      <td>17889647.00</td>\n",
       "      <td>17889647.00</td>\n",
       "      <td>17889647.00</td>\n",
       "      <td>17377917.00</td>\n",
       "      <td>17889647.00</td>\n",
       "      <td>17889647.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mean</th>\n",
       "      <td>2019-02-15 02:14:11.231677</td>\n",
       "      <td>2019-02-15 02:16:10.249091</td>\n",
       "      <td>2019-02-15 02:34:51.736528</td>\n",
       "      <td>138.77</td>\n",
       "      <td>141.64</td>\n",
       "      <td>4.76</td>\n",
       "      <td>1115.50</td>\n",
       "      <td>16.51</td>\n",
       "      <td>0.84</td>\n",
       "      <td>0.43</td>\n",
       "      <td>1.38</td>\n",
       "      <td>1.04</td>\n",
       "      <td>0.51</td>\n",
       "      <td>15.49</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>min</th>\n",
       "      <td>2019-01-31 23:19:44</td>\n",
       "      <td>2019-02-01 00:00:00</td>\n",
       "      <td>2019-02-01 00:02:09</td>\n",
       "      <td>1.00</td>\n",
       "      <td>1.00</td>\n",
       "      <td>0.01</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.01</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.01</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25%</th>\n",
       "      <td>2019-02-08 08:12:08</td>\n",
       "      <td>2019-02-08 08:15:00</td>\n",
       "      <td>2019-02-08 08:35:22</td>\n",
       "      <td>75.00</td>\n",
       "      <td>76.00</td>\n",
       "      <td>1.56</td>\n",
       "      <td>575.00</td>\n",
       "      <td>7.13</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.18</td>\n",
       "      <td>0.60</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>6.77</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50%</th>\n",
       "      <td>2019-02-15 02:03:55</td>\n",
       "      <td>2019-02-15 02:01:07</td>\n",
       "      <td>2019-02-15 02:17:14</td>\n",
       "      <td>140.00</td>\n",
       "      <td>141.00</td>\n",
       "      <td>2.92</td>\n",
       "      <td>922.00</td>\n",
       "      <td>11.41</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.28</td>\n",
       "      <td>0.97</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>10.89</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>75%</th>\n",
       "      <td>2019-02-22 11:40:38</td>\n",
       "      <td>2019-02-22 11:43:36</td>\n",
       "      <td>2019-02-22 12:02:43</td>\n",
       "      <td>211.00</td>\n",
       "      <td>217.00</td>\n",
       "      <td>5.83</td>\n",
       "      <td>1448.00</td>\n",
       "      <td>19.96</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.50</td>\n",
       "      <td>1.70</td>\n",
       "      <td>2.75</td>\n",
       "      <td>0.00</td>\n",
       "      <td>18.34</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>max</th>\n",
       "      <td>2019-02-28 23:58:52</td>\n",
       "      <td>2019-02-28 23:59:59</td>\n",
       "      <td>2019-03-01 02:38:12</td>\n",
       "      <td>265.00</td>\n",
       "      <td>265.00</td>\n",
       "      <td>149.94</td>\n",
       "      <td>67272.00</td>\n",
       "      <td>796.60</td>\n",
       "      <td>171.08</td>\n",
       "      <td>20.23</td>\n",
       "      <td>71.21</td>\n",
       "      <td>2.75</td>\n",
       "      <td>400.00</td>\n",
       "      <td>580.15</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>std</th>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>75.10</td>\n",
       "      <td>77.51</td>\n",
       "      <td>5.48</td>\n",
       "      <td>768.95</td>\n",
       "      <td>16.50</td>\n",
       "      <td>3.32</td>\n",
       "      <td>0.46</td>\n",
       "      <td>1.32</td>\n",
       "      <td>1.30</td>\n",
       "      <td>1.87</td>\n",
       "      <td>14.55</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                 request_datetime             pickup_datetime  \\\n",
       "count                    17886750                    17889647   \n",
       "mean   2019-02-15 02:14:11.231677  2019-02-15 02:16:10.249091   \n",
       "min           2019-01-31 23:19:44         2019-02-01 00:00:00   \n",
       "25%           2019-02-08 08:12:08         2019-02-08 08:15:00   \n",
       "50%           2019-02-15 02:03:55         2019-02-15 02:01:07   \n",
       "75%           2019-02-22 11:40:38         2019-02-22 11:43:36   \n",
       "max           2019-02-28 23:58:52         2019-02-28 23:59:59   \n",
       "std                           NaN                         NaN   \n",
       "\n",
       "                 dropoff_datetime  PULocationID  DOLocationID  trip_miles  \\\n",
       "count                    17889647   17889647.00   17889647.00 17889647.00   \n",
       "mean   2019-02-15 02:34:51.736528        138.77        141.64        4.76   \n",
       "min           2019-02-01 00:02:09          1.00          1.00        0.01   \n",
       "25%           2019-02-08 08:35:22         75.00         76.00        1.56   \n",
       "50%           2019-02-15 02:17:14        140.00        141.00        2.92   \n",
       "75%           2019-02-22 12:02:43        211.00        217.00        5.83   \n",
       "max           2019-03-01 02:38:12        265.00        265.00      149.94   \n",
       "std                           NaN         75.10         77.51        5.48   \n",
       "\n",
       "        trip_time  base_passenger_fare       tolls         bcf   sales_tax  \\\n",
       "count 17889647.00          17889647.00 17889647.00 17889647.00 17889647.00   \n",
       "mean      1115.50                16.51        0.84        0.43        1.38   \n",
       "min          0.00                 0.01        0.00        0.00        0.00   \n",
       "25%        575.00                 7.13        0.00        0.18        0.60   \n",
       "50%        922.00                11.41        0.00        0.28        0.97   \n",
       "75%       1448.00                19.96        0.00        0.50        1.70   \n",
       "max      67272.00               796.60      171.08       20.23       71.21   \n",
       "std        768.95                16.50        3.32        0.46        1.32   \n",
       "\n",
       "       congestion_surcharge        tips  driver_pay  \n",
       "count           17377917.00 17889647.00 17889647.00  \n",
       "mean                   1.04        0.51       15.49  \n",
       "min                    0.00        0.00        0.01  \n",
       "25%                    0.00        0.00        6.77  \n",
       "50%                    0.00        0.00       10.89  \n",
       "75%                    2.75        0.00       18.34  \n",
       "max                    2.75      400.00      580.15  \n",
       "std                    1.30        1.87       14.55  "
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "pd.options.display.float_format = '{:.2f}'.format\n",
    "df.describe()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "de2d1d1e-ba09-4ce7-a294-bf581c08d12e",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.8"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
